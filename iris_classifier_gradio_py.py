# -*- coding: utf-8 -*-
"""iris_classifier_gradio.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xoTz2IGj_fxedjwH_bUSHtCesGc_0G_W
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import  sklearn

from sklearn.datasets import load_iris
import pandas as pd

#load the dataset
iris = load_iris()

#convert to dataframe
df = pd.DataFrame(data=iris.data, columns = iris.feature_names)
df['species'] = iris.target

#map numeric species to names
df['species'] = df['species'].map(dict(enumerate(iris.target_names)));

#show the first 5 rows
print(df.head());

import matplotlib.pyplot as plt
import seaborn as sns

#pairplot to visualize pairwise relationships
sns.pairplot(df, hue='species')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report

#features and target
X = df.drop('species', axis=1);
Y = df['species']

#Split the dataset : 80% train, 20% test
x_train, x_test, y_train, y_test = train_test_split(X,Y,test_size=0.2, random_state=42);

#initialize and train the KNN model
model = KNeighborsClassifier(n_neighbors=3);
model.fit(x_train, y_train);

#predict on test set
y_pred = model.predict(x_test)

# Evaluate
print("Accuracy", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# try a different algorithm Logistic Regression

from  sklearn.linear_model import LogisticRegression

model = LogisticRegression(max_iter=200)
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

print("Accuracy" , accuracy_score(y_test, y_pred))
print("\nClassification Report :\n", classification_report(y_test,y_pred))

# Install Gradio
!pip install -q gradio

# Import libraries
import gradio as gr
from sklearn.datasets import load_iris
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd

# Load data
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = iris.target

# Train model
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X, y)

# Prediction function
def predict_species(sepal_length, sepal_width, petal_length, petal_width):
    input_data = [[sepal_length, sepal_width, petal_length, petal_width]]
    prediction = model.predict(input_data)
    return iris.target_names[prediction][0].capitalize()

# Build UI with Gradio
demo = gr.Interface(
    fn=predict_species,
    inputs=[
        gr.Number(label="Sepal Length (cm)"),
        gr.Number(label="Sepal Width (cm)"),
        gr.Number(label="Petal Length (cm)"),
        gr.Number(label="Petal Width (cm)")
    ],
    outputs=gr.Textbox(label="Predicted Species"),
    title="ðŸŒ¸ Iris Flower Classifier",
    description="Enter measurements to predict the iris flower species."
)

# Launch the app
demo.launch()

